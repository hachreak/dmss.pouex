
* Feature examples:
  - basic physic features: weight, height, mascot's breed, dirt
  - basic emotional features: happiness, sadness, health
  - basic actions: play, eat, clean, sleep, medication
  
* OCL: 
  + Each Pouex feature have to define: name, default, minumum, maximum values, type
  + Can't exist two feature with the same name.
  + At least should exist one defined action that can modify each features
  + One action can't modify level of a feature twice in succession 
  + Pouex must have a name
  + Pouex mush have at least one BodyPart
  - State.activation_condition.state2 != state: can't have recursion.

* Changes to do:
  - for each PouexEvent should have the possibility to define features of the event (like how many players, ...)
  - ActivationCondition: features => feature
  - Remove Operator in Action and set only value as "-1.0" or "*0.1"
  - Action Influence: currentStatus rename in "status" and set as boolean
  - Action Influence: rename value in "operation"
  - Rename in generation of action model: operation: i.value
  - Add OCL control in Influence value (operation)
  - Add OCL control in state name (can't have white space)
  - Activation condition threshold value should be compatible with feature value (e.g. if Happiness [0,10], threshold should be [0,10]
  - RepeatedEvent: eachMills > from double to int  
  
* Changes done:
  - how is implemented the events. Need to distinguish "environment event" like TimeEvent to PouexEvent like "Play"
  - BodyPart should not be a LiveObject, a State can alter one or more BodyPart 
  - delete PouexActionFeature and subtype of PouexAction
  